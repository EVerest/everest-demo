diff --git a/manager/handlers/ocpp201/authorize.go b/manager/handlers/ocpp201/authorize.go
index 10e5153..491a36d 100644
--- a/manager/handlers/ocpp201/authorize.go
+++ b/manager/handlers/ocpp201/authorize.go
@@ -11,6 +11,7 @@ import (
 	"github.com/thoughtworks/maeve-csms/manager/ocpp"
 	types "github.com/thoughtworks/maeve-csms/manager/ocpp/ocpp201"
 	"github.com/thoughtworks/maeve-csms/manager/services"
+	"golang.org/x/exp/slog"
 )
 
 type AuthorizeHandler struct {
@@ -26,6 +27,7 @@ func (a AuthorizeHandler) HandleCall(ctx context.Context, _ string, request ocpp
 	if req.Certificate != nil {
 		span.SetAttributes(attribute.String("authorize.certificate", "chain"))
 	} else if req.Iso15118CertificateHashData != nil {
+        slog.Info("SHANKARI: setting authorize.certificate = ", "hash")
 		span.SetAttributes(attribute.String("authorize.certificate", "hash"))
 	} else {
 		span.SetAttributes(attribute.String("authorize.certificate", "none"))
@@ -35,24 +37,42 @@ func (a AuthorizeHandler) HandleCall(ctx context.Context, _ string, request ocpp
 
 	var certificateStatus *types.AuthorizeCertificateStatusEnumType
 	if idTokenInfo.Status == types.AuthorizationStatusEnumTypeAccepted {
+        slog.Info("SHANKARI: idTokenInfo.Status = checking certificate validation ", idTokenInfo.Status)
 		if req.Certificate != nil {
+            slog.Info("SHANKARI: req.Certificate is present, validating PEM chain")
 			_, err := a.CertificateValidationService.ValidatePEMCertificateChain(ctx, []byte(*req.Certificate), req.IdToken.IdToken)
 			idTokenInfo.Status, certificateStatus = handleCertificateValidationError(err)
-			if err != nil {
+            slog.Info("SHANKARI: before OCSP check, values are ", certificateStatus, idTokenInfo.Status)
+			if err.Error() == "failed to perform ocsp check after 1 attempts" {
+				var tempStatus = types.AuthorizeCertificateStatusEnumTypeAccepted
+				certificateStatus = &tempStatus
+				idTokenInfo.Status = types.AuthorizationStatusEnumTypeAccepted
+                slog.Info("SHANKARI: OCSP invoked, overridden to ", certificateStatus, idTokenInfo.Status)
+				span.SetAttributes(attribute.String("authorize.cert_warn", "No OCSP, but ignoring for testing purpose."))
+			} else if err != nil {
 				span.SetAttributes(attribute.String("authorize.cert_error", err.Error()))
 			}
 		}
 
 		if req.Iso15118CertificateHashData != nil {
+            slog.Info("SHANKARI: req.Iso15118CertificateHashData is present, validating hashed chain")
 			_, err := a.CertificateValidationService.ValidateHashedCertificateChain(ctx, *req.Iso15118CertificateHashData)
 			idTokenInfo.Status, certificateStatus = handleCertificateValidationError(err)
-			if err != nil {
+            slog.Info("SHANKARI: before OCSP check, values are ", certificateStatus, idTokenInfo.Status)
+			if err.Error() == "failed to perform ocsp check after 1 attempts" {
+				var tempStatus = types.AuthorizeCertificateStatusEnumTypeAccepted
+				certificateStatus = &tempStatus
+				idTokenInfo.Status = types.AuthorizationStatusEnumTypeAccepted
+                slog.Info("SHANKARI: OCSP invoked, overridden to ", certificateStatus, idTokenInfo.Status)
+				span.SetAttributes(attribute.String("authorize.cert_warn", "No OCSP, but ignoring for testing purpose."))
+			} else if err != nil {
 				span.SetAttributes(attribute.String("authorize.cert_error", err.Error()))
 			}
 		}
 	}
 
 	if idTokenInfo.Status != types.AuthorizationStatusEnumTypeAccepted {
+        slog.Info("SHANKARI: idTokenInfo.Status = not accepted, ", idTokenInfo.Status)
 		var certStatus types.AuthorizeCertificateStatusEnumType
 		if certificateStatus != nil {
 			certStatus = *certificateStatus
