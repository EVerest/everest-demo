[
    {
        "id": "663d251dbdfd20aa",
        "type": "tab",
        "label": "Debug",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f17b3c3577ed4179",
        "type": "tab",
        "label": "RFID",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a0826fab08a85be9",
        "type": "tab",
        "label": "Connector 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6e0f6f4f7ec3c163",
        "type": "tab",
        "label": "1 PowerCurve Selector",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9fe0155e5b3d31b1",
        "type": "tab",
        "label": "External Power Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2fdf74399d3a2276",
        "type": "group",
        "z": "a0826fab08a85be9",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "69b40b4ad0d925e7"
        ],
        "x": 1114,
        "y": 439,
        "w": 152,
        "h": 82
    },
    {
        "id": "7140803fb3989089",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "EVerest",
                "default": "#4B7930",
                "baseColor": "#2a62ac",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#2a62ac",
                    "value": "#2a62ac",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#2a62ac",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#4f88d4",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#2a62ac",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "EVerest",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 6,
                "py": 6
            }
        }
    },
    {
        "id": "fc8686af.48d178",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt-server",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5e36140d.127f1c",
        "type": "ui_group",
        "name": "PowerMeter",
        "tab": "50c487c1.27e508",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ebbb0e3f.53fbf",
        "type": "ui_group",
        "name": "Actions",
        "tab": "50c487c1.27e508",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1709edaf.162962",
        "type": "ui_group",
        "name": "Debug",
        "tab": "50c487c1.27e508",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8d6f402b.8f007",
        "type": "ui_group",
        "name": "KeepAlive",
        "tab": "50c487c1.27e508",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1ebee360.265b5d",
        "type": "ui_group",
        "name": "PowerMeter",
        "tab": "50c487c1.27e508",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d3f19d5c.593e5",
        "type": "ui_group",
        "name": "State",
        "tab": "50c487c1.27e508",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b364f7eb4621082b",
        "type": "ui_group",
        "name": "Connector 1 [ISO15118]",
        "tab": "d3ada9fa4cf6ac53",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7cd2ccabb1265f7a",
        "type": "ui_group",
        "name": "RFID",
        "tab": "d3ada9fa4cf6ac53",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "50c487c1.27e508",
        "type": "ui_tab",
        "name": "Debug",
        "icon": "fa-fire",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d3ada9fa4cf6ac53",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ab3d4f6881421599",
        "type": "ui_group",
        "name": "PowerCurve Selection",
        "tab": "d3ada9fa4cf6ac53",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f33656cf38af1793",
        "type": "ui_group",
        "name": "ISO + OCPP Messages",
        "tab": "d3ada9fa4cf6ac53",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0e8d234f60b178a8",
        "type": "ui_group",
        "name": "External Limits",
        "tab": "d3ada9fa4cf6ac53",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "896ce8892f69fd26",
        "type": "ui_group",
        "name": "Schedule display",
        "tab": "d3ada9fa4cf6ac53",
        "order": 6,
        "disp": true,
        "width": 18,
        "collapse": true,
        "className": ""
    },
    {
        "id": "cf9212e69c58032e",
        "type": "mqtt in",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/powermeter/vrmsL1",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 100,
        "wires": [
            [
                "50300ad0248dba36"
            ]
        ]
    },
    {
        "id": "50300ad0248dba36",
        "type": "ui_chart",
        "z": "663d251dbdfd20aa",
        "name": "",
        "group": "5e36140d.127f1c",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "vrmsL1",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "60",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 400,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "4528766545477a29",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/enable",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 500,
        "y": 440,
        "wires": []
    },
    {
        "id": "ad3c945206dea281",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/disable",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 500,
        "y": 480,
        "wires": []
    },
    {
        "id": "d1aa153f493938dd",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "Enabled",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 120,
        "y": 460,
        "wires": [
            [
                "36dd5474288e7b86"
            ]
        ]
    },
    {
        "id": "36dd5474288e7b86",
        "type": "switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 460,
        "wires": [
            [
                "4528766545477a29"
            ],
            [
                "ad3c945206dea281"
            ]
        ]
    },
    {
        "id": "a707efb532c9a0e7",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "setThreePhases",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 140,
        "y": 540,
        "wires": [
            [
                "d8d24511b2c6b249"
            ]
        ]
    },
    {
        "id": "d8d24511b2c6b249",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/set_three_phases",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 370,
        "y": 540,
        "wires": []
    },
    {
        "id": "78b80174a4dc47c2",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "enableRCD",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 130,
        "y": 600,
        "wires": [
            [
                "a69e14ad325f4efd"
            ]
        ]
    },
    {
        "id": "a69e14ad325f4efd",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/enable_rcd",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 350,
        "y": 600,
        "wires": []
    },
    {
        "id": "8de5eadaaff5597e",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "setHasVentilation",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 150,
        "y": 660,
        "wires": [
            [
                "32cc91f55be42a5f"
            ]
        ]
    },
    {
        "id": "32cc91f55be42a5f",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/set_has_ventilation",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "3473afb8b909a903",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/set_auth",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 380,
        "y": 220,
        "wires": []
    },
    {
        "id": "fbef986122b2445d",
        "type": "ui_button",
        "z": "663d251dbdfd20aa",
        "name": "",
        "group": "ebbb0e3f.53fbf",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "setAuth(USERID)",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "USERID",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "3473afb8b909a903"
            ]
        ]
    },
    {
        "id": "1b510821ec205f74",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "switch3phWhileCharging",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 170,
        "y": 720,
        "wires": [
            [
                "4bb726bba8bf274d"
            ]
        ]
    },
    {
        "id": "4bb726bba8bf274d",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/switch_three_phases_while_charging",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "2dc6bf0a5deafdcd",
        "type": "mqtt in",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/debug_json",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 960,
        "wires": [
            [
                "1777b1cd3c9d696d"
            ]
        ]
    },
    {
        "id": "1777b1cd3c9d696d",
        "type": "json",
        "z": "663d251dbdfd20aa",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 960,
        "wires": [
            [
                "624adadaad6b47e5"
            ]
        ]
    },
    {
        "id": "624adadaad6b47e5",
        "type": "function",
        "z": "663d251dbdfd20aa",
        "name": "",
        "func": "var json = msg.payload;\n\n\n//tab[top] = {'Variable' : top, 'Value' : pay};\n\n\nnewpayload = [];\nfor(var index in json) {\n    newpayload.push({'Variable' : index, 'Value' : json[index]});\n}\n\nmsg.payload = newpayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 960,
        "wires": [
            [
                "802ba2f1665a9e85"
            ]
        ]
    },
    {
        "id": "802ba2f1665a9e85",
        "type": "ui_table",
        "z": "663d251dbdfd20aa",
        "group": "1709edaf.162962",
        "name": "Debug",
        "order": 12,
        "width": "6",
        "height": "11",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 680,
        "y": 960,
        "wires": []
    },
    {
        "id": "793501cb9d19ddfc",
        "type": "mqtt in",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/keepalive_json",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1140,
        "wires": [
            [
                "37cae9211f2e38b2"
            ]
        ]
    },
    {
        "id": "37cae9211f2e38b2",
        "type": "json",
        "z": "663d251dbdfd20aa",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "69c9b81785a9f15e"
            ]
        ]
    },
    {
        "id": "69c9b81785a9f15e",
        "type": "function",
        "z": "663d251dbdfd20aa",
        "name": "",
        "func": "var json = msg.payload;\n\n\n//tab[top] = {'Variable' : top, 'Value' : pay};\n\n\nnewpayload = [];\nfor(var index in json) {\n    newpayload.push({'Variable' : index, 'Value' : json[index]});\n}\n\nmsg.payload = newpayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1140,
        "wires": [
            [
                "fd543037ee2d33ab"
            ]
        ]
    },
    {
        "id": "fd543037ee2d33ab",
        "type": "ui_table",
        "z": "663d251dbdfd20aa",
        "group": "8d6f402b.8f007",
        "name": "KeepAlive",
        "order": 12,
        "width": "6",
        "height": "4",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 690,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8212f7a72635089f",
        "type": "mqtt in",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/powermeter_json",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1200,
        "wires": [
            [
                "e2d7c1af5d8d0186"
            ]
        ]
    },
    {
        "id": "e2d7c1af5d8d0186",
        "type": "json",
        "z": "663d251dbdfd20aa",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 360,
        "y": 1200,
        "wires": [
            [
                "ab5211ea8ceefe01"
            ]
        ]
    },
    {
        "id": "ab5211ea8ceefe01",
        "type": "function",
        "z": "663d251dbdfd20aa",
        "name": "",
        "func": "var json = msg.payload;\n\n\n//tab[top] = {'Variable' : top, 'Value' : pay};\n\n\nnewpayload = [];\nfor(var index in json) {\n    newpayload.push({'Variable' : index, 'Value' : json[index]});\n}\n\nmsg.payload = newpayload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "c5c9a9e9918a34f7"
            ]
        ]
    },
    {
        "id": "c5c9a9e9918a34f7",
        "type": "ui_table",
        "z": "663d251dbdfd20aa",
        "group": "1ebee360.265b5d",
        "name": "PowerMeter",
        "order": 12,
        "width": "6",
        "height": "11",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 710,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7b5f656b808976c9",
        "type": "mqtt in",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/state/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "94bfdcd30fd97469"
            ]
        ]
    },
    {
        "id": "94bfdcd30fd97469",
        "type": "function",
        "z": "663d251dbdfd20aa",
        "name": "",
        "func": "let cur_topic_index = -1;\nlet topics_list_length = 0;\n\nvar topics_list = global.get(\"state_topics_list\");\nvar payload_list = global.get(\"state_payload_list\");\nvar new_payload = [];\n\nfor (var topics_list_index in topics_list) {\n    if ( (topics_list[topics_list_index].indexOf(msg.topic) >= 0) && (topics_list[topics_list_index].length == msg.topic.length) ) {\n        cur_topic_index = topics_list_index;\n        break;\n    }\n    topics_list_length++;\n}\n\nif (cur_topic_index > -1) {\n    payload_list[cur_topic_index] = msg.payload;\n} else {\n    topics_list.push(msg.topic);\n    payload_list.push(msg.payload);\n}\n\nglobal.set(\"state_topics_list\", topics_list);\nglobal.set(\"state_payload_list\", payload_list);\n\n\nfor (var index in payload_list) {\n    new_payload.push({'Variable': topics_list[index].substr(16, topics_list[index].length), 'Value': payload_list[index]});\n}\n\nmsg.payload = new_payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"state_topics_list\", []);\nglobal.set(\"state_payload_list\", []);",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1020,
        "wires": [
            [
                "703f01832a52d59a"
            ]
        ]
    },
    {
        "id": "703f01832a52d59a",
        "type": "ui_table",
        "z": "663d251dbdfd20aa",
        "group": "d3f19d5c.593e5",
        "name": "State",
        "order": 12,
        "width": "6",
        "height": "4",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 690,
        "y": 1020,
        "wires": []
    },
    {
        "id": "a5fb17674a9b55e7",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "enableHLC",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 130,
        "y": 780,
        "wires": [
            [
                "ec04b28f53a7a3aa"
            ]
        ]
    },
    {
        "id": "ec04b28f53a7a3aa",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/enable_hlc",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 350,
        "y": 780,
        "wires": []
    },
    {
        "id": "fc99f10533e7aa4a",
        "type": "ui_switch",
        "z": "663d251dbdfd20aa",
        "name": "",
        "label": "Simulation RCD",
        "tooltip": "",
        "group": "ebbb0e3f.53fbf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 140,
        "y": 840,
        "wires": [
            [
                "0a425358d0e4d041"
            ]
        ]
    },
    {
        "id": "0a425358d0e4d041",
        "type": "mqtt out",
        "z": "663d251dbdfd20aa",
        "name": "",
        "topic": "/external/cmd/enable_rcd",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 350,
        "y": 840,
        "wires": []
    },
    {
        "id": "d0f5149d466c61f8",
        "type": "comment",
        "z": "663d251dbdfd20aa",
        "name": "Debug",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "2774a937638309a4",
        "type": "mqtt out",
        "z": "f17b3c3577ed4179",
        "name": "",
        "topic": "everest_api/dummy_token_provider/cmd/provide",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 1000,
        "y": 120,
        "wires": []
    },
    {
        "id": "b0de291e8ee3a446",
        "type": "ui_dropdown",
        "z": "f17b3c3577ed4179",
        "name": "",
        "label": "id_token",
        "tooltip": "",
        "place": "Select option",
        "group": "7cd2ccabb1265f7a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "DEADBEEF",
                "value": "DEADBEEF",
                "type": "str"
            },
            {
                "label": "ABC12345",
                "value": "ABC12345",
                "type": "str"
            },
            {
                "label": "VID:AABBCCDDEEFF",
                "value": "VID:AABBCCDDEEFF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "id_token",
        "topicType": "str",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "d0b3b4d9c8a9b886"
            ]
        ]
    },
    {
        "id": "cf060378838bafd6",
        "type": "ui_switch",
        "z": "f17b3c3577ed4179",
        "name": "",
        "label": "prevalidated",
        "tooltip": "",
        "group": "7cd2ccabb1265f7a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "prevalidated",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 410,
        "y": 220,
        "wires": [
            [
                "d0b3b4d9c8a9b886"
            ]
        ]
    },
    {
        "id": "574c64169d9ccef5",
        "type": "ui_text_input",
        "z": "f17b3c3577ed4179",
        "name": "",
        "label": "type (2-32)",
        "tooltip": "",
        "group": "7cd2ccabb1265f7a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "token_type",
        "topicType": "str",
        "x": 410,
        "y": 160,
        "wires": [
            [
                "d0b3b4d9c8a9b886"
            ]
        ]
    },
    {
        "id": "35cf27d31b68d03d",
        "type": "debug",
        "z": "f17b3c3577ed4179",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "da737c630a719b24",
        "type": "inject",
        "z": "f17b3c3577ed4179",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "id_token",
        "payload": "DEADBEEF",
        "payloadType": "str",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "b0de291e8ee3a446"
            ]
        ]
    },
    {
        "id": "7b8233fec00bd775",
        "type": "inject",
        "z": "f17b3c3577ed4179",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "token_type",
        "payload": "RFID",
        "payloadType": "str",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "574c64169d9ccef5"
            ]
        ]
    },
    {
        "id": "18c8790a36c7051d",
        "type": "inject",
        "z": "f17b3c3577ed4179",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "prevalidated",
        "payload": "false",
        "payloadType": "bool",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "cf060378838bafd6"
            ]
        ]
    },
    {
        "id": "d0b3b4d9c8a9b886",
        "type": "function",
        "z": "f17b3c3577ed4179",
        "name": "Swipe token",
        "func": "if (msg.topic.indexOf('id_token') > -1) flow.set('id_token', msg.payload);\nif (msg.topic.indexOf('token_type') > -1) flow.set('token_type', msg.payload);\nif (msg.topic.indexOf('prevalidated') > -1) flow.set('prevalidated', msg.payload);\nif (msg.topic.indexOf('connectors') > -1) flow.set('connectors', msg.payload);\nif (msg.topic.indexOf('complete') > -1) {\n    msg.payload = {\n        'id_token': {\n    'value': flow.get('id_token'),\n 'type': 'ISO14443'\n},\n        'authorization_type': flow.get('token_type'),\n        'prevalidated': flow.get('prevalidated'),\n        'connectors': [flow.get('connectors')]\n    };\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 160,
        "wires": [
            [
                "35cf27d31b68d03d",
                "2774a937638309a4"
            ]
        ]
    },
    {
        "id": "e297d1860704a4bb",
        "type": "ui_button",
        "z": "f17b3c3577ed4179",
        "name": "",
        "group": "7cd2ccabb1265f7a",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Swipe RFID",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "complete",
        "topicType": "str",
        "x": 410,
        "y": 380,
        "wires": [
            [
                "d0b3b4d9c8a9b886"
            ]
        ]
    },
    {
        "id": "2a4b2dd0dd0b9234",
        "type": "inject",
        "z": "f17b3c3577ed4179",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "connectors",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "413069428d71034d"
            ]
        ]
    },
    {
        "id": "413069428d71034d",
        "type": "ui_numeric",
        "z": "f17b3c3577ed4179",
        "name": "",
        "label": "connectors",
        "tooltip": "",
        "group": "7cd2ccabb1265f7a",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "connectors",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1",
        "max": 10,
        "step": 1,
        "x": 410,
        "y": 300,
        "wires": [
            [
                "d0b3b4d9c8a9b886"
            ]
        ]
    },
    {
        "id": "1e82303e962876d4",
        "type": "comment",
        "z": "a0826fab08a85be9",
        "name": "Initialize the Connector number",
        "info": "",
        "x": 230,
        "y": 80,
        "wires": []
    },
    {
        "id": "5aa333c22338db4b",
        "type": "change",
        "z": "a0826fab08a85be9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "connector_number",
                "pt": "flow",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "759bcefa669f3002",
        "type": "inject",
        "z": "a0826fab08a85be9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "5aa333c22338db4b"
            ]
        ]
    },
    {
        "id": "f844242d504f71ee",
        "type": "comment",
        "z": "a0826fab08a85be9",
        "name": "Data to show",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "d3065488e47454ea",
        "type": "mqtt out",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 1230,
        "y": 840,
        "wires": []
    },
    {
        "id": "37c23b56ba88f38d",
        "type": "ui_button",
        "z": "a0826fab08a85be9",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Pause",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "everest_external/nodered/#/cmd/pause_charging",
        "topicType": "str",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "f09fc0c4c21685bb"
            ]
        ]
    },
    {
        "id": "7c52e33df3e9d30c",
        "type": "ui_button",
        "z": "a0826fab08a85be9",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Resume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "everest_external/nodered/#/cmd/resume_charging",
        "topicType": "str",
        "x": 160,
        "y": 760,
        "wires": [
            [
                "f09fc0c4c21685bb"
            ]
        ]
    },
    {
        "id": "f09fc0c4c21685bb",
        "type": "change",
        "z": "a0826fab08a85be9",
        "name": "Insert Connector number",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "#",
                "fromt": "str",
                "to": "connector_number",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 840,
        "wires": [
            [
                "d3065488e47454ea"
            ]
        ]
    },
    {
        "id": "8866c4ae3285173c",
        "type": "comment",
        "z": "a0826fab08a85be9",
        "name": "Commands",
        "info": "",
        "x": 170,
        "y": 640,
        "wires": []
    },
    {
        "id": "d637d654a3c24f0c",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/state/max_current",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "738bbb424a59f2be"
            ]
        ]
    },
    {
        "id": "738bbb424a59f2be",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Filter connector number",
        "func": "if (msg.topic.indexOf(String(flow.get('connector_number'))) > -1) return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "bb7f6a1c5ac9e4fe"
            ]
        ]
    },
    {
        "id": "bb7f6a1c5ac9e4fe",
        "type": "ui_text",
        "z": "a0826fab08a85be9",
        "group": "b364f7eb4621082b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Max Current",
        "format": "{{msg.payload | number: 1}}",
        "layout": "row-spread",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "142fd46ebdf3ec26",
        "type": "ui_text",
        "z": "a0826fab08a85be9",
        "group": "b364f7eb4621082b",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Energy Charged",
        "format": "{{msg.payload | number:2}} kWh",
        "layout": "row-spread",
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "c37f76222eb781df",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Filter connector number",
        "func": "if (msg.topic.indexOf(String(flow.get('connector_number'))) > -1) return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "142fd46ebdf3ec26"
            ]
        ]
    },
    {
        "id": "a944805dfd305367",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/powermeter/totalKWattHr",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 340,
        "wires": [
            [
                "c37f76222eb781df"
            ]
        ]
    },
    {
        "id": "d9a202b37ab76ed8",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/state/state_string",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 440,
        "wires": [
            [
                "d79c08d4e0ede255"
            ]
        ]
    },
    {
        "id": "a3099593d26918d7",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/powermeter/totalKw",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 500,
        "wires": [
            [
                "e5df62fa214097a4"
            ]
        ]
    },
    {
        "id": "256935c0d6e98392",
        "type": "ui_level",
        "z": "a0826fab08a85be9",
        "group": "b364f7eb4621082b",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature:",
        "colorHi": "#e60000",
        "colorWarn": "#ff9900",
        "colorNormal": "#00b33c",
        "colorOff": "#595959",
        "min": "-20",
        "max": "85",
        "segWarn": "65",
        "segHigh": "75",
        "unit": "",
        "layout": "sh",
        "channelA": "",
        "channelB": "",
        "decimals": 0,
        "animations": "soft",
        "shape": "3",
        "colorschema": "valuedriven",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "segments",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 1010,
        "y": 560,
        "wires": []
    },
    {
        "id": "7c9906c54a58d254",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/state/temperature",
        "qos": "0",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "32cdd7ac8301b1e4"
            ]
        ]
    },
    {
        "id": "b5aa70b24e65e03f",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "",
        "func": "if (msg.topic.indexOf('totalKw')>=0) {\n    console.warn(\"Received totalKw message\");\n    if (context.data.stop_updating_kw) {\n        console.error(\"stopping kw updates because this is annoying\")\n    } else {\n        context.data.totalKw = msg.payload;\n    }\n}\n\nelse if (msg.topic.indexOf('state_string')>=0) {\n    context.data.state_string = msg.payload;\n} \n\n//node.warn(msg.topic);\nmsg.payload = context.data.totalKw;\nmsg.label = context.data.state_string;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.data = {}",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "ca735c857dda239e",
                "69b40b4ad0d925e7"
            ]
        ]
    },
    {
        "id": "ca735c857dda239e",
        "type": "debug",
        "z": "a0826fab08a85be9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "69b40b4ad0d925e7",
        "type": "ui_gauge",
        "z": "a0826fab08a85be9",
        "g": "2fdf74399d3a2276",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 8,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "{{msg.label}}",
        "label": "Kilowatt",
        "format": "{{value}} kW",
        "min": "0",
        "max": "11",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1190,
        "y": 480,
        "wires": []
    },
    {
        "id": "e5df62fa214097a4",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Filter connector number",
        "func": "if (msg.topic.indexOf(String(flow.get('connector_number'))) > -1) return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 500,
        "wires": [
            [
                "b5aa70b24e65e03f"
            ]
        ]
    },
    {
        "id": "d79c08d4e0ede255",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Filter connector number",
        "func": "if (msg.topic.indexOf(String(flow.get('connector_number'))) > -1) return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 460,
        "wires": [
            [
                "b5aa70b24e65e03f"
            ]
        ]
    },
    {
        "id": "32cdd7ac8301b1e4",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Filter connector number",
        "func": "if (msg.topic.indexOf(String(flow.get('connector_number'))) > -1) return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 560,
        "wires": [
            [
                "256935c0d6e98392"
            ]
        ]
    },
    {
        "id": "45aa44c87d90f1ec",
        "type": "comment",
        "z": "a0826fab08a85be9",
        "name": "Simulation control",
        "info": "",
        "x": 190,
        "y": 820,
        "wires": []
    },
    {
        "id": "fb22de286958c852",
        "type": "ui_switch",
        "z": "a0826fab08a85be9",
        "name": "",
        "label": "Simulation enable (HIL)",
        "tooltip": "",
        "group": "b364f7eb4621082b",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "everest_external/nodered/carsim/#/cmd/enable",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 210,
        "y": 880,
        "wires": [
            [
                "f09fc0c4c21685bb"
            ]
        ]
    },
    {
        "id": "fc06fe20465770af",
        "type": "ui_button",
        "z": "a0826fab08a85be9",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 10,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Car Plugin",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "everest_external/nodered/#/carsim/cmd/execute_charging_session",
        "topicType": "str",
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "7506be4a6aff035f"
            ]
        ]
    },
    {
        "id": "03cf1f0ea467772a",
        "type": "ui_button",
        "z": "a0826fab08a85be9",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Stop & Unplug",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "stop",
        "payloadType": "str",
        "topic": "everest_external/nodered/#/carsim/cmd/modify_charging_session",
        "topicType": "str",
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "7506be4a6aff035f"
            ]
        ]
    },
    {
        "id": "9ba907c936fc226a",
        "type": "ui_slider",
        "z": "a0826fab08a85be9",
        "name": "MaxCurrent Slider",
        "label": "",
        "tooltip": "",
        "group": "b364f7eb4621082b",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "everest_external/nodered/#/cmd/set_max_current",
        "topicType": "str",
        "min": "6",
        "max": "16",
        "step": "0.1",
        "x": 450,
        "y": 700,
        "wires": [
            [
                "f09fc0c4c21685bb"
            ]
        ]
    },
    {
        "id": "7f4208bd3c3c4216",
        "type": "ui_dropdown",
        "z": "a0826fab08a85be9",
        "name": "",
        "label": "Car Simulation",
        "tooltip": "",
        "place": "Select option",
        "group": "b364f7eb4621082b",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "AC ISO15118-2",
                "value": "sleep 1;iso_wait_slac_matched;iso_start_v2g_session ac,-1,-1;iso_wait_pwr_ready;iso_draw_power_regulated 16,3;sleep 36000#iso_stop_charging;iso_wait_v2g_session_stopped;unplug#iso_pause_charging;iso_wait_for_resume#iso_start_bcb_toogle 3;iso_wait_pwm_is_running;iso_start_v2g_session AC_three_phase_core,-1,-1;iso_wait_pwr_ready;iso_draw_power_regulated 16,3;sleep 36000",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "sim_commands",
        "topicType": "str",
        "className": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "7506be4a6aff035f"
            ]
        ]
    },
    {
        "id": "7506be4a6aff035f",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Buffer sim commands",
        "func": "function handleDTEAChange() {\n    let dt = Number(global.get('sim_departure_time'));\n    let ea = Number(global.get('sim_eamount'));\n\n    node.warn(dt)\n    node.warn(ea)\n\n    node.warn(flow.get('sim_commands_start'))\n    node.warn(flow.get('sim_commands_resume'))\n\n    let start = flow.get('sim_commands_start').split(';')\n    let resume = flow.get('sim_commands_resume').split(';')\n\n    for (let i = 0; i < start.length; i++) {\n        if (start[i].includes(\"iso_start_v2g\")) {\n            let cmd = start[i].split(\",\")\n\n            if (dt > 0){\n                node.warn(\"setting dt\")\n                cmd[1] = dt;\n            } \n            else {\n                cmd[1] = -1;\n            }\n            if (ea > 0){\n                node.warn(\"setting ea\")\n                cmd[2] = ea;\n            }\n            else {\n                cmd[2] = -1;\n            }\n            start[i] = cmd.join(\",\");\n        }\n    }\n\n    for (let i = 0; i < resume.length; i++) {\n        if (resume[i].includes(\"iso_start_v2g\")) {\n            let cmd = resume[i].split(\",\")\n            if (dt > 0){\n                node.warn(\"setting dt\")\n                cmd[1] = dt;\n            } \n            else {\n                cmd[1] = -1;\n            }\n            if (ea > 0){\n                node.warn(\"setting ea\")\n                cmd[2] = ea;\n            }\n            else {\n                cmd[2] = -1;\n            }\n            resume[i] = cmd.join(\",\");\n        }\n    }\n\n    start = start.join(\";\")\n    resume = resume.join(\";\")\n\n    flow.set('sim_commands_start', start);\n    flow.set('sim_commands_resume', resume);\n\n}\n\n\nif (msg.topic.indexOf('sim_commands') > -1) {\n    const s = msg.payload.split('#');\n    flow.set('sim_commands_start', s[0]);\n    flow.set('sim_commands_stop', s[1]);\n    flow.set('sim_commands_pause', s[2]);\n    flow.set('sim_commands_resume', s[3]);\n} else if (msg.topic === 'eamount' || msg.topic === 'departure_time') {\n} else if (msg.payload == 'start') {\n    handleDTEAChange();\n    msg.payload = flow.get('sim_commands_start');\n    return msg;\n} else if (msg.payload == 'stop') {\n    msg.payload = flow.get('sim_commands_stop');\n    return msg;\n} else if (msg.payload == 'pause') {\n    msg.payload = flow.get('sim_commands_pause');\n    return msg;\n} else if (msg.payload == 'resume') {\n    msg.payload = flow.get('sim_commands_resume');\n    return msg;\n} else {\n    msg.payload = 'NONE';\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1000,
        "wires": [
            [
                "f09fc0c4c21685bb",
                "7bebe0d7082d03f6",
                "d8ba331e9fb46608"
            ]
        ]
    },
    {
        "id": "d8ba331e9fb46608",
        "type": "debug",
        "z": "a0826fab08a85be9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6ea65381f436442d",
        "type": "inject",
        "z": "a0826fab08a85be9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "sim_commands",
        "payload": "sleep 1;iec_wait_pwr_ready;sleep 1;draw_power_regulated 16,3;sleep 36000#unplug#pause;sleep 3600#draw_power_regulated 16,3;sleep 36000",
        "payloadType": "str",
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "7f4208bd3c3c4216"
            ]
        ]
    },
    {
        "id": "7bebe0d7082d03f6",
        "type": "debug",
        "z": "a0826fab08a85be9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1100,
        "wires": []
    },
    {
        "id": "4afaa0c8382beffe",
        "type": "ui_button",
        "z": "a0826fab08a85be9",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "EV Pause",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "pause",
        "payloadType": "str",
        "topic": "everest_external/nodered/#/carsim/cmd/modify_charging_session",
        "topicType": "str",
        "x": 160,
        "y": 1120,
        "wires": [
            [
                "7506be4a6aff035f"
            ]
        ]
    },
    {
        "id": "2c4147de275acc6f",
        "type": "ui_button",
        "z": "a0826fab08a85be9",
        "name": "",
        "group": "b364f7eb4621082b",
        "order": 13,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "EV Resume",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "resume",
        "payloadType": "str",
        "topic": "everest_external/nodered/#/carsim/cmd/modify_charging_session",
        "topicType": "str",
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "7506be4a6aff035f"
            ]
        ]
    },
    {
        "id": "2c905996b70be7b2",
        "type": "ui_text_input",
        "z": "a0826fab08a85be9",
        "name": "",
        "label": "EAmount",
        "tooltip": "",
        "group": "b364f7eb4621082b",
        "order": 17,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "eamount",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 160,
        "y": 920,
        "wires": [
            [
                "0c0c878367b6daa0"
            ]
        ]
    },
    {
        "id": "9e50a4ad5c3a2eb8",
        "type": "ui_text_input",
        "z": "a0826fab08a85be9",
        "name": "",
        "label": "DepartureTime:",
        "tooltip": "",
        "group": "b364f7eb4621082b",
        "order": 18,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "departure_time",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 180,
        "y": 1000,
        "wires": [
            [
                "0c0c878367b6daa0"
            ]
        ]
    },
    {
        "id": "0c0c878367b6daa0",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Set SIM EAmount & DepartureTime",
        "func": "if (msg.topic == 'eamount') {\n    global.set('sim_eamount', msg.payload);\n    return msg;\n}\n\nglobal.set('sim_departure_time', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// flow.set('sim_eamount', 60);\n// flow.set('sim_departure_time', 86400);",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "399abf8ec94726b5",
                "7506be4a6aff035f"
            ]
        ]
    },
    {
        "id": "399abf8ec94726b5",
        "type": "link out",
        "z": "a0826fab08a85be9",
        "name": "Change PowerCurve",
        "mode": "link",
        "links": [
            "32e0bed5f21a8e8e"
        ],
        "x": 725,
        "y": 940,
        "wires": []
    },
    {
        "id": "bf54d6e7f4407eb4",
        "type": "ui_dropdown",
        "z": "a0826fab08a85be9",
        "name": "",
        "label": "Simulation Speed",
        "tooltip": "",
        "place": "Select option",
        "group": "b364f7eb4621082b",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "1x",
                "value": 1,
                "type": "num"
            },
            {
                "label": "5x",
                "value": 5,
                "type": "num"
            },
            {
                "label": "10x",
                "value": 10,
                "type": "num"
            },
            {
                "label": "25x",
                "value": 25,
                "type": "num"
            },
            {
                "label": "100x",
                "value": 100,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 350,
        "y": 1340,
        "wires": [
            [
                "709a55b3cda2605a"
            ]
        ]
    },
    {
        "id": "61c2230580cbae59",
        "type": "inject",
        "z": "a0826fab08a85be9",
        "name": "Initialize Alg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 170,
        "y": 1340,
        "wires": [
            [
                "bf54d6e7f4407eb4"
            ]
        ]
    },
    {
        "id": "709a55b3cda2605a",
        "type": "change",
        "z": "a0826fab08a85be9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "simulation_speed",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "9ed0c7e051cd4512",
        "type": "mqtt out",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/evcc/confirm_sim_speed",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 1090,
        "y": 1400,
        "wires": []
    },
    {
        "id": "6676589a8fd839d7",
        "type": "delay",
        "z": "a0826fab08a85be9",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.25",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 790,
        "y": 1400,
        "wires": [
            [
                "9ed0c7e051cd4512"
            ]
        ]
    },
    {
        "id": "2fb635b06944d7ec",
        "type": "change",
        "z": "a0826fab08a85be9",
        "name": "send sim_eamount",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "simulation_speed",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1400,
        "wires": [
            [
                "6676589a8fd839d7"
            ]
        ]
    },
    {
        "id": "dfa6c181320e0a2a",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/evcc/check_sim_speed",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 1400,
        "wires": [
            [
                "2fb635b06944d7ec"
            ]
        ]
    },
    {
        "id": "2dc28cbe488affc8",
        "type": "mqtt out",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/evcc/confirm_departure_time",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 1190,
        "y": 1460,
        "wires": []
    },
    {
        "id": "5cafb4cf904e3b0a",
        "type": "delay",
        "z": "a0826fab08a85be9",
        "name": "",
        "pauseType": "delay",
        "timeout": "0.25",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 870,
        "y": 1460,
        "wires": [
            [
                "2dc28cbe488affc8"
            ]
        ]
    },
    {
        "id": "c988916cd7e85eec",
        "type": "change",
        "z": "a0826fab08a85be9",
        "name": "send sim_departure_time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sim_departure_time",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1460,
        "wires": [
            [
                "5cafb4cf904e3b0a",
                "b4dce9863a93b57b"
            ]
        ]
    },
    {
        "id": "b02c6b6694c2aacd",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest_external/nodered/+/evcc/check_departure_time",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 1460,
        "wires": [
            [
                "c988916cd7e85eec"
            ]
        ]
    },
    {
        "id": "47dec13ba80137c8",
        "type": "debug",
        "z": "a0826fab08a85be9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1720,
        "wires": []
    },
    {
        "id": "4ed86142559ce758",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest/iso15118_ev/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1600,
        "wires": [
            [
                "399646327fb325c7"
            ]
        ]
    },
    {
        "id": "a59c5c76f7b59eae",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest/iso15118_charger/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1660,
        "wires": [
            [
                "399646327fb325c7"
            ]
        ]
    },
    {
        "id": "399646327fb325c7",
        "type": "json",
        "z": "a0826fab08a85be9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "925c07bafa356330"
            ]
        ]
    },
    {
        "id": "925c07bafa356330",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Process Message & Update Flow State",
        "func": "const MAX_MESSAGES = 100;\n\nfunction getLatestOrCreateArray(name, store, maxLength) {\n    let value = flow.get(name, store);\n    if (value === undefined) {\n        value = [];\n    } else if (value.length >= maxLength) {\n        value = value.slice(1 - maxLength);\n    }\n    return value\n}\n\nvar everest_messages = getLatestOrCreateArray(\n    \"everest_messages\", \"memoryOnly\", MAX_MESSAGES\n);\nvar iso15118_message_ids = getLatestOrCreateArray(\n    \"iso15118_message_ids\", \"memoryOnly\", MAX_MESSAGES\n);\n\nvar everest_message;\nif (msg.payload.type === \"result\") {\n    everest_message = {\n        \"payload\": {\n            \"origin\": msg.payload.data.origin,\n            \"name\": msg.payload.name,\n            \"type\": msg.payload.type,\n            \"args\": \"N/A\"\n        }\n    };\n} else if (msg.payload.type === \"call\") {\n    everest_message = {\n        \"payload\": {\n            \"origin\": msg.payload.data.origin,\n            \"name\": msg.payload.name,\n            \"type\": msg.payload.type,\n            \"args\": JSON.stringify(msg.payload.data.args)\n        }\n    };\n} else if (\n    (\"data\" in msg.payload)\n    && (typeof msg.payload.data === 'object')\n    && !Array.isArray(msg.payload.data)\n    && (msg.payload.data !== null)\n    && (\"V2G_Message_ID\" in msg.payload.data)\n) {\n    everest_message = {\n        \"payload\": {\n            \"origin\": \"V2G_Messages\",\n            \"name\": msg.payload.data.V2G_Message_ID,\n            \"type\": \"N/A\",\n            \"args\": msg.payload.data.V2G_Message_EXI_Hex\n        }\n    };\n    iso15118_message_ids.push(msg.payload.data.V2G_Message_ID);\n} else {\n    everest_message = {\"payload\": msg.payload};\n}\neverest_messages.push(everest_message);\n\nflow.set(\"everest_messages\", everest_messages, \"memoryOnly\");\nflow.set(\"iso15118_message_ids\", iso15118_message_ids, \"memoryOnly\");\n\nmsg.payload = everest_messages;\nmsg.v2g_messages = iso15118_message_ids\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1620,
        "wires": [
            [
                "6ddebe46e9b89d41"
            ]
        ]
    },
    {
        "id": "76dd68e71fef39df",
        "type": "inject",
        "z": "a0826fab08a85be9",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 1800,
        "wires": [
            [
                "622a14111d99e7ea"
            ]
        ]
    },
    {
        "id": "622a14111d99e7ea",
        "type": "function",
        "z": "a0826fab08a85be9",
        "name": "Kill ISO 15118 Events Log",
        "func": "flow.set('everest_messages', undefined, 'memoryOnly');\nflow.set('iso15118_message_ids', undefined, 'memoryOnly');\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "bdb8cf43e38cbe8c",
        "type": "ui_template",
        "z": "a0826fab08a85be9",
        "group": "1709edaf.162962",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload_formatted\" height=\"700\" style=\"height: 700px;\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "6ddebe46e9b89d41",
        "type": "template",
        "z": "a0826fab08a85be9",
        "name": "To HTML",
        "field": "payload_formatted",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<span>\n    {{#v2g_messages}}\n    {{.}},\n    {{/v2g_messages}}\n</span>\n<br />\n<br />\n<table border=\"1\">\n    <tr>\n        <th>Origin</th>\n        <th>Name</th>\n        <th>Type</th>\n        <th>Arguments / V2G Message (EXI Hex)</th>\n    </tr>\n    {{#payload}}\n    <tr class=\"\">\n        <td>{{payload.origin}}</td>\n        <td>{{payload.name}}</td>\n        <td>{{payload.type}}</td>\n        <td>{{payload.args}}</td>\n    </tr>\n    {{/payload}}\n</table>",
        "output": "str",
        "x": 920,
        "y": 1620,
        "wires": [
            [
                "bdb8cf43e38cbe8c"
            ]
        ]
    },
    {
        "id": "9ee8de24d5f5f38d",
        "type": "comment",
        "z": "a0826fab08a85be9",
        "name": "ISO 15118 Logs",
        "info": "",
        "x": 160,
        "y": 1560,
        "wires": []
    },
    {
        "id": "daa858222d243584",
        "type": "mqtt in",
        "z": "a0826fab08a85be9",
        "name": "",
        "topic": "everest/ocpp/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1720,
        "wires": [
            [
                "e9b6e98959838695"
            ]
        ]
    },
    {
        "id": "e9b6e98959838695",
        "type": "json",
        "z": "a0826fab08a85be9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 1720,
        "wires": [
            [
                "47dec13ba80137c8"
            ]
        ]
    },
    {
        "id": "4a76fdec0a5e7f1e",
        "type": "inject",
        "z": "a0826fab08a85be9",
        "name": "Initialize sim_departure_time",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "init_sim_dt",
        "payload": "86400",
        "payloadType": "str",
        "x": 220,
        "y": 1500,
        "wires": [
            [
                "49e764bc4aebb36d"
            ]
        ]
    },
    {
        "id": "49e764bc4aebb36d",
        "type": "change",
        "z": "a0826fab08a85be9",
        "name": "send sim_departure_time",
        "rules": [
            {
                "t": "set",
                "p": "sim_departure_time",
                "pt": "global",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "b4dce9863a93b57b",
        "type": "debug",
        "z": "a0826fab08a85be9",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1500,
        "wires": []
    },
    {
        "id": "32e0bed5f21a8e8e",
        "type": "link in",
        "z": "6e0f6f4f7ec3c163",
        "name": "Update DepartureTime & EAmount",
        "links": [
            "399abf8ec94726b5"
        ],
        "x": 335,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "af6292bfc559bd14",
        "type": "function",
        "z": "6e0f6f4f7ec3c163",
        "name": "Parse JSON",
        "func": "if (msg.topic === 'everest_external/nodered/{}/evcc/active_powercurve' ) {\n    // Python auto-formats dicts to use single quotes, but JSON.parse doesn't\n    // like that.  The RegEx below fixes this\n    msg.payload = msg.payload.replace(/'/g, '\"')\n}\n\nconst data_points = JSON.parse(msg.payload)\nmsg.payload = [data_points]\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 180,
        "wires": [
            [
                "26536e4ec1e28303"
            ]
        ]
    },
    {
        "id": "e160527f95cc893d",
        "type": "mqtt in",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "topic": "everest_external/nodered/+/evcc/active_powercurve",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 510,
        "y": 120,
        "wires": [
            [
                "af6292bfc559bd14"
            ]
        ]
    },
    {
        "id": "26536e4ec1e28303",
        "type": "function",
        "z": "6e0f6f4f7ec3c163",
        "name": "Stop Edits During Charge",
        "func": "if(msg.topic === 'power_curve_preview') {\n    // Only allow preview when not charging\n    if (flow.get('charging_status') === 'Idle' ) {\n        return msg\n    }\n}\nelse { // If active curve is sent...\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 180,
        "wires": [
            [
                "f33ec375c7595743"
            ]
        ]
    },
    {
        "id": "f33ec375c7595743",
        "type": "function",
        "z": "6e0f6f4f7ec3c163",
        "name": "Split Curve: Power draw",
        "func": "progress_curve = {\n    \"series\": [msg.payload[0].series[0]],\n    \"data\": [msg.payload[0].data[0]],\n    \"labels\": [msg.payload[0].labels[0]]\n}\nlet time_scale = 1000\nlet scale = 1000\n\nprogress_curve.data[0] = progress_curve.data[0].map(item => {\n    return {\n        x: flow.get(\"charging_start_ts\") + item.y * time_scale, // X & Y need swapped\n        y: item.x / scale // eamount progress\n    };\n});\n\n\nmsg.payload = [progress_curve]\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 160,
        "wires": [
            [
                "3a88d2530c5a3041",
                "48810353c6d0ecb8"
            ]
        ]
    },
    {
        "id": "142ed5afefab1cfd",
        "type": "ui_dropdown",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "label": "Pre_Charge_Selection",
        "tooltip": "",
        "place": "Select option",
        "group": "b364f7eb4621082b",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Smooth",
                "value": "algorithm_one",
                "type": "str"
            },
            {
                "label": "Aggressive",
                "value": "algorithm_two",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 340,
        "y": 420,
        "wires": [
            [
                "235788d63be0b4fc"
            ]
        ]
    },
    {
        "id": "235788d63be0b4fc",
        "type": "change",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "curve_algorithm",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4fbd7f07c5b9223d",
        "type": "mqtt in",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "topic": "everest_external/nodered/+/evcc/check_algorithm",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "47b6e8414c31d486"
            ]
        ]
    },
    {
        "id": "c86fb15d081a70ea",
        "type": "mqtt out",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "topic": "everest_external/nodered/evcc/confirm_algorithm",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 1030,
        "y": 480,
        "wires": []
    },
    {
        "id": "aeab74c21aae5853",
        "type": "delay",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 480,
        "wires": [
            [
                "c86fb15d081a70ea"
            ]
        ]
    },
    {
        "id": "929007f67fb49a68",
        "type": "mqtt in",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "topic": "everest_external/nodered/+/state/state_string",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 360,
        "wires": [
            [
                "6e8cfd89dbc02c30",
                "346c0909fe80a4f2"
            ]
        ]
    },
    {
        "id": "2bdae8585bea1cdd",
        "type": "mqtt in",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "topic": "everest_external/nodered/+/evcc/check_eamount",
        "qos": "2",
        "datatype": "auto",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 540,
        "wires": [
            [
                "9b709f6f02c47d0c"
            ]
        ]
    },
    {
        "id": "47b6e8414c31d486",
        "type": "change",
        "z": "6e0f6f4f7ec3c163",
        "name": "send flow.curve_algorithm",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "curve_algorithm",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 480,
        "wires": [
            [
                "aeab74c21aae5853"
            ]
        ]
    },
    {
        "id": "9b709f6f02c47d0c",
        "type": "change",
        "z": "6e0f6f4f7ec3c163",
        "name": "send sim_eamount",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sim_eamount",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 540,
        "wires": [
            [
                "f88a7e9c8aadb50a"
            ]
        ]
    },
    {
        "id": "f88a7e9c8aadb50a",
        "type": "delay",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 540,
        "wires": [
            [
                "5ff35a79585abadd"
            ]
        ]
    },
    {
        "id": "5ff35a79585abadd",
        "type": "mqtt out",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "topic": "everest_external/nodered/evcc/confirm_eamount",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fc8686af.48d178",
        "x": 1030,
        "y": 540,
        "wires": []
    },
    {
        "id": "6e8cfd89dbc02c30",
        "type": "function",
        "z": "6e0f6f4f7ec3c163",
        "name": "Reset Graph after Charge",
        "func": "if (msg.payload === \"Idle\") {\n    return {payload: {}};\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 220,
        "wires": [
            [
                "3a88d2530c5a3041"
            ]
        ]
    },
    {
        "id": "346c0909fe80a4f2",
        "type": "function",
        "z": "6e0f6f4f7ec3c163",
        "name": "SetLocalChargingState",
        "func": "flow.set(\"charging_status\",msg.payload)\nif (msg.payload === \"Charging\") {\n    flow.set(\"charging_start_ts\", new Date().getTime());\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "3a88d2530c5a3041",
        "type": "ui_chart",
        "z": "6e0f6f4f7ec3c163",
        "name": "",
        "group": "ab3d4f6881421599",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Current Power curve",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1700,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "5a729b72439b78ec",
        "type": "inject",
        "z": "6e0f6f4f7ec3c163",
        "name": "Initialize Alg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "algorithm_one",
        "payloadType": "str",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "142ed5afefab1cfd"
            ]
        ]
    },
    {
        "id": "48810353c6d0ecb8",
        "type": "debug",
        "z": "6e0f6f4f7ec3c163",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 60,
        "wires": []
    },
    {
        "id": "1ef1dcc581d80607",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "start_time",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 60,
        "wires": []
    },
    {
        "id": "eb8c4d1be09b9511",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "create_post_message",
        "func": "node.warn(\"Received payload \"+msg.payload);\nconst time_values = flow.get([\"start_time\", \"end_time\"]);\nconst energy_values = flow.get([\"max_current\"]);\nconst duration = Math.ceil((time_values[1] - time_values[0]) / 1000);\nnode.warn(\"time_values are \" + time_values+\" duration = \"+duration);\nconst charge_profile_template = {\n    \"id\": 2000,\n        \"chargingProfileKind\": \"Absolute\",\n        \"chargingProfilePurpose\": \"ChargingStationMaxProfile\",\n                \"chargingSchedule\": [\n                    {\n                        \"id\": 0,\n                        \"chargingRateUnit\": \"A\",\n                        \"chargingSchedulePeriod\": [\n                            {\n                                \"limit\": energy_values[0],\n                                \"numberPhases\": 3,\n                                \"startPeriod\": 0\n                            }\n                        ],\n                        \"duration\": duration,\n                        \"minChargingRate\": 0.0,\n                        \"startSchedule\": new Date(time_values[0]),\n                    }\n                ],\n                    \"stackLevel\": 0\n}\n\nconst wrapperMsg = {payload: charge_profile_template};\nreturn wrapperMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "dd5c01bd89d1a332",
                "0b8a2d5b13bb7809"
            ]
        ]
    },
    {
        "id": "dd5c01bd89d1a332",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "formatted_post",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 260,
        "wires": []
    },
    {
        "id": "0b8a2d5b13bb7809",
        "type": "http request",
        "z": "9fe0155e5b3d31b1",
        "name": "send_set_charging_profile",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://host.docker.internal:9410/api/v0/cs/cp001/setchargingprofile",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 510,
        "y": 340,
        "wires": [
            [
                "28e4961dc9f0129e"
            ]
        ]
    },
    {
        "id": "28e4961dc9f0129e",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "http_response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 340,
        "wires": []
    },
    {
        "id": "3d44bdce67fb80de",
        "type": "ui_text_input",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "label": "Start:",
        "tooltip": "",
        "group": "0e8d234f60b178a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "datetime-local",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "1ef1dcc581d80607",
                "61e3f2339b3e0da0"
            ]
        ]
    },
    {
        "id": "b041a6efa19167c7",
        "type": "ui_text_input",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "label": "End:",
        "tooltip": "",
        "group": "0e8d234f60b178a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "datetime-local",
        "delay": 300,
        "topic": "external_limit_end",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 430,
        "y": 60,
        "wires": [
            [
                "15a95c5d894549e7",
                "31958f916cb20b65"
            ]
        ]
    },
    {
        "id": "15a95c5d894549e7",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "end_time",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "45fbfa036a572ce9",
        "type": "change",
        "z": "9fe0155e5b3d31b1",
        "name": "set_start_time",
        "rules": [
            {
                "t": "set",
                "p": "start_time",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9b997430586ae6b5",
        "type": "change",
        "z": "9fe0155e5b3d31b1",
        "name": "set_end_time",
        "rules": [
            {
                "t": "set",
                "p": "end_time",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4ff73892fd4c4ec0",
        "type": "ui_text-input",
        "z": "9fe0155e5b3d31b1",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "current_limit",
        "label": "Current",
        "tooltip": "",
        "group": "0e8d234f60b178a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "change": true,
        "delay": 300,
        "topic": "",
        "x": 810,
        "y": 60,
        "wires": [
            [
                "136a9980a3a2e5ad",
                "aff8eeda481cde7a"
            ]
        ]
    },
    {
        "id": "136a9980a3a2e5ad",
        "type": "change",
        "z": "9fe0155e5b3d31b1",
        "name": "set_max_current",
        "rules": [
            {
                "t": "set",
                "p": "max_current",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d8c82c7f6ae9e9fa",
        "type": "ui_button",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "group": "0e8d234f60b178a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send to CSMS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "eb8c4d1be09b9511"
            ]
        ]
    },
    {
        "id": "aff8eeda481cde7a",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "current_limit",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 60,
        "wires": []
    },
    {
        "id": "ce8a2c522beb9fd2",
        "type": "inject",
        "z": "9fe0155e5b3d31b1",
        "name": "now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "c050da8732b0983f"
            ]
        ]
    },
    {
        "id": "127f32101eb457a9",
        "type": "ui_text-input",
        "z": "9fe0155e5b3d31b1",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "midas_username",
        "label": "MIDAS Username",
        "tooltip": "",
        "group": "896ce8892f69fd26",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "change": true,
        "delay": 300,
        "topic": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "53e0a0fdef826546"
            ]
        ]
    },
    {
        "id": "0c2a5407890f9d90",
        "type": "ui_text-input",
        "z": "9fe0155e5b3d31b1",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "midas_password",
        "label": "MIDAS Password",
        "tooltip": "",
        "group": "896ce8892f69fd26",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "password",
        "change": true,
        "delay": 300,
        "topic": "",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "32e72011475fdb43"
            ]
        ]
    },
    {
        "id": "a776addbf7929283",
        "type": "ui_ui-button",
        "z": "9fe0155e5b3d31b1",
        "action": "click",
        "actionType": "str",
        "name": "midas_login",
        "group": "896ce8892f69fd26",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Login",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "54d622574f8d449c"
            ]
        ]
    },
    {
        "id": "53e0a0fdef826546",
        "type": "change",
        "z": "9fe0155e5b3d31b1",
        "name": "store_username",
        "rules": [
            {
                "t": "set",
                "p": "midas_username",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "32e72011475fdb43",
        "type": "change",
        "z": "9fe0155e5b3d31b1",
        "name": "store_password",
        "rules": [
            {
                "t": "set",
                "p": "midas_password",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "1c41db118d9d7fda",
        "type": "http request",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://midasapi.energy.ca.gov/api/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "payload"
            }
        ],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "3df84a10c312b65b"
            ]
        ]
    },
    {
        "id": "54d622574f8d449c",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "create_credentials",
        "func": "const [username, password] = flow.get([\"midas_username\", \"midas_password\"]);\nconst credentials = username+\":\"+password;\nconst encoded_creds = Buffer.from(credentials).toString('base64');\n// msg.raw_credential = credentials;\nreturn { payload: \"BASIC \" + encoded_creds };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "1c41db118d9d7fda"
            ]
        ]
    },
    {
        "id": "af18076715eb4907",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "token_response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 620,
        "wires": []
    },
    {
        "id": "ab888e97bf676f1f",
        "type": "http request",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://midasapi.energy.ca.gov/api/valuedata?id=USCA-TSTS-TTOU-TEST&querytype=alldata",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "payload"
            },
            {
                "keyType": "Accept",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 390,
        "y": 760,
        "wires": [
            [
                "8fd6bf8a808acc78"
            ]
        ]
    },
    {
        "id": "b3db8a8d24a89e51",
        "type": "template",
        "z": "9fe0155e5b3d31b1",
        "name": "prepend_bearer",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Bearer {{payload}}",
        "output": "str",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "ab888e97bf676f1f"
            ]
        ]
    },
    {
        "id": "8fd6bf8a808acc78",
        "type": "json",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 760,
        "wires": [
            [
                "d8a242215aa132ac"
            ]
        ]
    },
    {
        "id": "3df84a10c312b65b",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "extract_token",
        "func": "return {payload: msg.headers.token}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 680,
        "wires": [
            [
                "af18076715eb4907",
                "b3db8a8d24a89e51"
            ]
        ]
    },
    {
        "id": "5c50f314b538a56a",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "format_table",
        "func": "// var json = msg.payload;\n\n\n//tab[top] = {'Variable' : top, 'Value' : pay};\n\n\n// const newpayload = [];\n// for (var index in json) {\n//     newpayload.push({ 'Variable': index, 'Value': json[index] });\n// }\nreturn {payload: msg.payload.ValueInformation};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 740,
        "wires": [
            [
                "858ac58593760eaa"
            ]
        ]
    },
    {
        "id": "858ac58593760eaa",
        "type": "ui_table",
        "z": "9fe0155e5b3d31b1",
        "group": "896ce8892f69fd26",
        "name": "real_time_table",
        "order": 5,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1040,
        "y": 740,
        "wires": []
    },
    {
        "id": "7c9d1a5aaa708145",
        "type": "ui_chart",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "group": "896ce8892f69fd26",
        "order": 6,
        "width": 18,
        "height": 3,
        "label": "Curtailment over time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1060,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "3d3182ef4b0aefd2",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "format_chart",
        "func": "const data_array = msg.payload.ValueInformation.map((entry) => {\n    return {x: new Date(entry.DateStart+\"T\"+entry.TimeStart+\"-0800\").getTime(), y: entry.value}\n});\nnode.warn(data_array);\nreturn {payload: [{labels: [\"\"], series: [\"TOU\"], data: [data_array]}]};\n\n/*\nreturn {payload:\n    [{\n        \"series\": [\"A\", \"B\", \"C\"],\n        \"data\": [\n            [{ \"x\": 1504029632890, \"y\": 5 },\n            { \"x\": 1504029636001, \"y\": 4 },\n            { \"x\": 1504029638656, \"y\": 2 }\n            ],\n            [{ \"x\": 1504029633514, \"y\": 6 },\n            { \"x\": 1504029636622, \"y\": 7 },\n            { \"x\": 1504029639539, \"y\": 6 }\n            ],\n            [{ \"x\": 1504029634400, \"y\": 7 },\n            { \"x\": 1504029637959, \"y\": 7 },\n            { \"x\": 1504029640317, \"y\": 7 }\n            ]\n        ],\n        \"labels\": [\"\"]\n    }]\n    }\n    */",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 780,
        "wires": [
            [
                "7c9d1a5aaa708145"
            ]
        ]
    },
    {
        "id": "7bb036cb14fcfb0a",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "process_rate_schedules",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 840,
        "wires": []
    },
    {
        "id": "87232c8ce6671d63",
        "type": "inject",
        "z": "9fe0155e5b3d31b1",
        "name": "initialize",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "858ac58593760eaa",
                "7c9d1a5aaa708145"
            ]
        ]
    },
    {
        "id": "f82d7044a6028ac8",
        "type": "ui_ui-button",
        "z": "9fe0155e5b3d31b1",
        "action": "click",
        "actionType": "str",
        "name": "send_midas_schedule_to_csms",
        "group": "896ce8892f69fd26",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send MIDAS schedule to CSMS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "453f10c5a7350302"
            ]
        ]
    },
    {
        "id": "7d3bb23e3d97455d",
        "type": "change",
        "z": "9fe0155e5b3d31b1",
        "name": "store_result_in_flow",
        "rules": [
            {
                "t": "set",
                "p": "midas_schedule",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "453f10c5a7350302",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "convert_to_recurring_schedule",
        "func": "const midas_schedule = flow.get(\"midas_schedule\");\n\n// Assumptions:\n// time ranges start and end at hour boundaries\n// there are no gaps (not sure how to handle gaps, we would probably need to have separate schedules)\n// since the duration is only in the schedule\n// logic for that seems too complicated right now\n// start date is hardcoded (can make it be dynamic if we assume that the first entry\n// has the earliest start date)\n\nconst schedulePeriods = midas_schedule.ValueInformation.map((entry) => {\n    return {\n        // we get the hour by splitting the time and taking the\n        // first entry, then we multiply by 3600 to get it in seconds\n        startPeriod: entry.TimeStart.split(\":\")[0] * 3600,\n        limit: entry.value,\n        numberPhases: 3\n    }\n});\nnode.warn(schedulePeriods);\n\n// based on section 3.6 of the OCPP spec\n\nconst final_schedule = {\n    \"id\": 100, \n    \"chargingProfileKind\": \"Recurring\",\n    \"chargingProfilePurpose\": \"TxDefaultProfile\",\n    \"recurrencyKind\": \"Daily\",\n    \"stackLevel\": 0,\n    \"chargingSchedule\": [\n    {\n        \"id\": 0,\n        \"chargingRateUnit\": \"A\",\n        \"chargingSchedulePeriod\": schedulePeriods,\n        \"duration\": 86400,\n        \"minChargingRate\": 0.0,\n        \"startSchedule\": new Date(\"2022-01-01T08:00:00Z\"),\n    }],\n}\n\n\n/*\nconst final_schedule = {\n    id: 100,\n    stackLevel: 0,\n    chargingProfilePurpose: \"TxDefaultProfile\",\n    chargingProfileKind: \"Recurring\",\n    recurrencyKind: \"Daily\",\n    chargingSchedule: {\n        id: 0,\n        duration: 86400,\n        chargingRateUnit: \"A\",\n        startSchedule: new Date(\"2022-01-01T00:00:00Z\").toString(),\n        chargingSchedulePeriod: schedulePeriods\n    }\n}\n*/\nreturn {payload: final_schedule};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "0b8a2d5b13bb7809",
                "dd5c01bd89d1a332"
            ]
        ]
    },
    {
        "id": "d8a242215aa132ac",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "massage_and_rescale",
        "func": "// The MIDAS data currently has tariffs, which we don't support\n// we want to actually get curtailment data,\n// but don't have time to coordinate with CARB\n// so let's massage the tariff data to look like a curtailment.\n// Steps:\n// find the range of tariff changes\n// assume that range of current changes is from 0-16 (45)\n// Determine the scaling factor\n// determine the increment over the minimum tariff\n// apply the scaling factor\n// more tariff = lower usage, so subtract from the max current\n\nnode.warn(msg.payload);\nconst original_value_objs = msg.payload.ValueInformation;\nconst original_values = original_value_objs.map((entry) => {\n    return entry.value;\n})\nconst min_original = Math.min(...original_values);\nconst max_original = Math.max(...original_values);\nconst scaling_factor = 16 / (max_original - min_original);\nnode.warn(\"min_original = \"+min_original+\" max original \"+max_original+\" scaling_factor\" + scaling_factor);\nconst new_value_objs = original_value_objs.map((entry) => {\n    entry.value = 16 - ((entry.value - min_original) * scaling_factor);\n    entry.Unit = 'A';\n    return entry;\n});\nmsg.payload.ValueInformation = new_value_objs;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 820,
        "wires": [
            [
                "5c50f314b538a56a",
                "3d3182ef4b0aefd2",
                "7d3bb23e3d97455d",
                "7bb036cb14fcfb0a"
            ]
        ]
    },
    {
        "id": "563d0956472cfd36",
        "type": "mqtt in",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "topic": "everest_external/nodered/+/state/max_current",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "61d453e21fbe4b48"
            ]
        ]
    },
    {
        "id": "61d453e21fbe4b48",
        "type": "ui_chart",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "group": "0e8d234f60b178a8",
        "order": 4,
        "width": "6",
        "height": "4",
        "label": "Configured current limits",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "8fd1767acadc72c4",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "extract_ocpp_limit",
        "func": "function get_humanized_evse(evseId) {\n    if (evseId == 0) return \"Station\"\n    else return \"EVSE \"+evseId;\n}\n\nreturn {payload: msg.payload.charging_schedule_period[0].limit,\n    topic: get_humanized_evse(msg.payload.evse) + \" OCPP limit\"\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "61d453e21fbe4b48",
                "bfdde55c5b6eba0a"
            ]
        ]
    },
    {
        "id": "84cf15f37335a643",
        "type": "split",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 610,
        "y": 920,
        "wires": [
            [
                "8fd1767acadc72c4"
            ]
        ]
    },
    {
        "id": "bfdde55c5b6eba0a",
        "type": "debug",
        "z": "9fe0155e5b3d31b1",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 960,
        "wires": []
    },
    {
        "id": "98027f96fc6092aa",
        "type": "mqtt in",
        "z": "9fe0155e5b3d31b1",
        "name": "",
        "topic": "everest/ocpp/ocpp_generic/var",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "fc8686af.48d178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 1000,
        "wires": [
            [
                "8aeb84d9a7a87059"
            ]
        ]
    },
    {
        "id": "8aeb84d9a7a87059",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "extract_schedules",
        "func": "return {payload: msg.payload.data.schedules};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 920,
        "wires": [
            [
                "84cf15f37335a643"
            ]
        ]
    },
    {
        "id": "c050da8732b0983f",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "convert_to_local_time",
        "func": "node.warn(\"Converting \"+new Date(msg.payload)+ \" to \"+ new Date(msg.payload - 8*3600*1000))\nmsg.payload = msg.payload - 8 * 3600 * 1000\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "3d44bdce67fb80de",
                "b041a6efa19167c7"
            ]
        ]
    },
    {
        "id": "61e3f2339b3e0da0",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "convert_to_utc",
        "func": "msg.payload = msg.payload + 8 * 3600 * 1000\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 20,
        "wires": [
            [
                "45fbfa036a572ce9"
            ]
        ]
    },
    {
        "id": "31958f916cb20b65",
        "type": "function",
        "z": "9fe0155e5b3d31b1",
        "name": "convert_to_utc",
        "func": "msg.payload = msg.payload + 8 * 3600 * 1000\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 20,
        "wires": [
            [
                "9b997430586ae6b5"
            ]
        ]
    }
]
