--- /ext/source/modules/EvseV2G/iso_server.cpp
+++ /ext/source/modules/EvseV2G/iso_server.cpp
@@ -1130,32 +1130,55 @@ static enum v2g_event handle_iso_charge_parameter_discovery(struct v2g_connectio
     res->EVSEChargeParameter_isUsed = 0;
     res->EVSEProcessing = (iso2_EVSEProcessingType)conn->ctx->evse_v2g_data.evse_processing[PHASE_PARAMETER];
 
+    struct linked_ac_params {
+	float max_current;
+        int64_t voltage;
+        int64_t pmax;
+    };
+
+    linked_ac_params sel_params;
+
     /* Configure SA-schedules*/
     if (res->EVSEProcessing == iso2_EVSEProcessingType_Finished) {
         /* If processing is finished, configure SASchedule list */
         if (conn->ctx->evse_v2g_data.evse_sa_schedule_list_is_used == false) {
+	    int64_t departure_time_duration = req->AC_EVChargeParameter.DepartureTime;
+
             /* If not configured, configure SA-schedule automatically for AC charging */
             if (conn->ctx->is_dc_charger == false) {
                 /* Determin max current and nominal voltage */
-                float max_current = conn->ctx->basic_config.evse_ac_current_limit;
-                int64_t nom_voltage =
+		linked_ac_params default_params;
+                /* Setup default params (before the departure time overrides) */
+                default_params.max_current = conn->ctx->basic_config.evse_ac_current_limit;
+                default_params.voltage =
                     conn->ctx->evse_v2g_data.evse_nominal_voltage.Value *
                     pow(10, conn->ctx->evse_v2g_data.evse_nominal_voltage.Multiplier); /* nominal voltage */
-
-                /* Calculate pmax based on max current, nominal voltage and phase count (which the car has selected
-                 * above) */
-                int64_t pmax =
-                    max_current * nom_voltage *
+		default_params.pmax =
+                    default_params.max_current * default_params.voltage *
                     ((req->RequestedEnergyTransferMode == iso2_EnergyTransferModeType_AC_single_phase_core) ? 1 : 3);
+
+		dlog(DLOG_LEVEL_WARNING, "before adjusting for departure time, max_current %f, nom_voltage %d, pmax %d, departure_duration %d",
+			default_params.max_current, default_params.voltage,
+			default_params.pmax, departure_time_duration);
+                double req_eamount = calc_physical_value(req->AC_EVChargeParameter.EAmount.Value,
+                        req->AC_EVChargeParameter.EAmount.Multiplier);
+                dlog(DLOG_LEVEL_WARNING, "Requested departure time %u, requested energy %f",
+			departure_time_duration, req_eamount);
+                sel_params = default_params;
+
                 populate_physical_value(&conn->ctx->evse_v2g_data.evse_sa_schedule_list.SAScheduleTuple.array[0]
                                              .PMaxSchedule.PMaxScheduleEntry.array[0]
                                              .PMax,
-                                        pmax, iso2_unitSymbolType_W);
+					     sel_params.pmax, iso2_unitSymbolType_W);
             } else {
                 conn->ctx->evse_v2g_data.evse_sa_schedule_list.SAScheduleTuple.array[0]
                     .PMaxSchedule.PMaxScheduleEntry.array[0]
                     .PMax = conn->ctx->evse_v2g_data.evse_maximum_power_limit;
             }
+	    if (departure_time_duration == 0) {
+                departure_time_duration = SA_SCHEDULE_DURATION; // one day, per spec
+            }
+
             conn->ctx->evse_v2g_data.evse_sa_schedule_list.SAScheduleTuple.array[0]
                 .PMaxSchedule.PMaxScheduleEntry.array[0]
                 .RelativeTimeInterval.start = 0;
@@ -1164,7 +1187,7 @@ static enum v2g_event handle_iso_charge_parameter_discovery(struct v2g_connectio
                 .RelativeTimeInterval.duration_isUsed = 1;
             conn->ctx->evse_v2g_data.evse_sa_schedule_list.SAScheduleTuple.array[0]
                 .PMaxSchedule.PMaxScheduleEntry.array[0]
-                .RelativeTimeInterval.duration = SA_SCHEDULE_DURATION;
+                .RelativeTimeInterval.duration = departure_time_duration;
             conn->ctx->evse_v2g_data.evse_sa_schedule_list.SAScheduleTuple.array[0]
                 .PMaxSchedule.PMaxScheduleEntry.arrayLen = 1;
             conn->ctx->evse_v2g_data.evse_sa_schedule_list.SAScheduleTuple.arrayLen = 1;
@@ -1212,14 +1235,8 @@ static enum v2g_event handle_iso_charge_parameter_discovery(struct v2g_connectio
         populate_physical_value_float(&res->AC_EVSEChargeParameter.EVSEMaxCurrent, max_current, 1,
                                       iso2_unitSymbolType_A);
 
-        /* Nominal voltage */
-        res->AC_EVSEChargeParameter.EVSENominalVoltage = conn->ctx->evse_v2g_data.evse_nominal_voltage;
-        int64_t nom_voltage = conn->ctx->evse_v2g_data.evse_nominal_voltage.Value *
-                              pow(10, conn->ctx->evse_v2g_data.evse_nominal_voltage.Multiplier);
-
         /* Calculate pmax based on max current, nominal voltage and phase count (which the car has selected above) */
-        int64_t pmax = max_current * nom_voltage *
-                       ((iso2_EnergyTransferModeType_AC_single_phase_core == req->RequestedEnergyTransferMode) ? 1 : 3);
+        int64_t pmax = sel_params.pmax;
 
         /* Check the SASchedule */
         if (res->SAScheduleList_isUsed == (unsigned int)1) {
