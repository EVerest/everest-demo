--- /ext/dist/libexec/everest/3rd_party/josev/iso15118/evcc/controller/simulator.py	2024-11-20 09:51:36.878132628 +0000
+++ /ext/dist/libexec/everest/3rd_party/josev/iso15118/evcc/controller/simulator.py	2024-11-20 09:51:36.878132628 +0000
@@ -7,6 +7,7 @@
 import logging
 import random
 from typing import List, Optional, Tuple, Union
+from time import time
 import os
 from pathlib import Path
 
@@ -53,6 +54,7 @@
     SAScheduleTupleEntry as SAScheduleTupleEntryDINSPEC,
 )
 from iso15118.shared.messages.enums import (
+    AuthEnum,
     ControlMode,
     DCEVErrorCode,
     EnergyTransferModeEnum,
@@ -130,6 +132,15 @@
     to_ec_priv_key,
 )
 
+from iso15118.evcc.states.power_curve import (
+        LQRChargeCurve, 
+        formatCurveData,
+        generate_new_schedule,
+        generate_dummy_schedule
+)
+import paho.mqtt.publish as mqtt_publish
+import paho.mqtt.subscribe as mqtt_subscribe
+
 from iso15118.shared.settings import get_PKI_PATH
 
 logger = logging.getLogger(__name__)
@@ -290,7 +301,7 @@
         dc_charge_params = None
 
         if (await self.get_energy_transfer_mode(protocol)).startswith("AC"):
-            e_amount = PVEAmount(multiplier=0, value=60,
+            e_amount = PVEAmount(multiplier=3, value=EVEREST_EV_STATE.EAmount,
                                  unit=UnitSymbol.WATT_HOURS)
             ev_max_voltage = PVEVMaxVoltage(
                 multiplier=0, value=400, unit=UnitSymbol.VOLTAGE
@@ -302,7 +313,7 @@
                 multiplier=0, value=10, unit=UnitSymbol.AMPERE
             )
             ac_charge_params = ACEVChargeParameter(
-                departure_time=0,
+                departure_time=EVEREST_EV_STATE.DepartureTime,
                 e_amount=e_amount,
                 ev_max_voltage=ev_max_voltage,
                 ev_max_current=ev_max_current,
@@ -313,7 +324,7 @@
                 multiplier=1, value=6000, unit=UnitSymbol.WATT_HOURS
             )
             dc_charge_params = DCEVChargeParameter(
-                departure_time=0,
+                departure_time=EVEREST_EV_STATE.DepartureTime,
                 dc_ev_status=await self.get_dc_ev_status(),
                 ev_maximum_current_limit=self.dc_ev_charge_params.dc_max_current_limit,
                 ev_maximum_power_limit=self.dc_ev_charge_params.dc_max_power_limit,
@@ -429,7 +440,7 @@
         )
 
         scheduled_params = ScheduledScheduleExchangeReqParams(
-            departure_time=7200,
+            departure_time=EVEREST_EV_STATE.DepartureTime,
             ev_target_energy_request=RationalNumber(exponent=3, value=10),
             ev_max_energy_request=RationalNumber(exponent=3, value=20),
             ev_min_energy_request=RationalNumber(exponent=-2, value=5),
@@ -443,7 +454,7 @@
     ) -> DynamicScheduleExchangeReqParams:
         """Overrides EVControllerInterface.get_dynamic_se_params()."""
         dynamic_params = DynamicScheduleExchangeReqParams(
-            departure_time=7200,
+            departure_time=EVEREST_EV_STATE.DepartureTime,
             min_soc=30,
             target_soc=80,
             ev_target_energy_request=RationalNumber(exponent=3, value=40),
@@ -584,12 +595,15 @@
         return schedule.sa_schedule_tuple_id
 
     async def process_sa_schedules_v2(
-        self, sa_schedules: List[SAScheduleTuple]
+        self, sa_schedules: List[SAScheduleTuple], time_elapsed 
     ) -> Tuple[ChargeProgressV2, int, ChargingProfile]:
+        print("In ProcessSchedules")
         """Overrides EVControllerInterface.process_sa_schedules()."""
         secc_schedule = sa_schedules.pop()
         evcc_profile_entry_list: List[ProfileEntryDetails] = []
 
+        print(f"Processing SASchedules! ${sa_schedules}")
+        print(f"Processing SASchedules! ${time_elapsed}")
         # The charging schedule coming from the SECC is called 'schedule', the
         # pendant coming from the EVCC (after having processed the offered
         # schedule(s)) is called 'profile'. Therefore, we use the prefix
@@ -617,13 +631,48 @@
                 )
                 evcc_profile_entry_list.append(last_profile_entry_details)
 
+        print("Done processing schedules...")
+        # Set Curve Variables...
+        print("About to handle pmax schedule %s" % secc_schedule.p_max_schedule.schedule_entries[0])
+        p_max = secc_schedule.p_max_schedule.schedule_entries[0].p_max
+        pmax:float = p_max.value * pow(10, p_max.multiplier)
+        print(f"{pmax=}")
+        departure_time = secc_schedule.p_max_schedule.schedule_entries[0].time_interval.duration
+        new_schedule = evcc_profile_entry_list
+        print("Abt to generate Curve...", time_elapsed)
+        if (time_elapsed  > departure_time):
+            print("End of Profile! Defaulting to EVCC profile enteries")
+        else:
+            ks = 1
+            # Check EAmount
+            mqtt_publish.single("everest_external/nodered/{}/evcc/check_eamount", "test", hostname="mqtt-server")
+            eamount_msg = mqtt_subscribe.simple("everest_external/nodered/evcc/confirm_eamount", hostname="mqtt-server")
+            eamount =  int(str(eamount_msg.payload)[2:-1])
+            # Check which algorithm is being used
+            mqtt_publish.single("everest_external/nodered/{}/evcc/check_algorithm", "test", hostname="mqtt-server")
+            msg = mqtt_subscribe.simple("everest_external/nodered/evcc/confirm_algorithm", hostname="mqtt-server")
+            algorithm_choice = str(msg.payload)[2:-1] # convert bytestring
+            if(algorithm_choice == 'algorithm_one'):
+                ks = 10
+            else: # == algorithm_two
+                ks = 1
+            power_draw_progress, power_draw, time_vector = LQRChargeCurve(departure_time, eamount, pmax, ks)
+            print(f"About to generate a new schedule with a EVCC_Profile {evcc_profile_entry_list}")
+            new_schedule = generate_new_schedule(evcc_profile_entry_list, power_draw, time_vector, departure_time, time_elapsed)
+            print(f"New schedule of length {len(new_schedule)} created")
+
+            formatted_curve = formatCurveData(new_schedule)
+            # Then Re-Publish the chosen curve as the final selection
+            print(f"About to publish {str(formatted_curve)=}")
+            mqtt_publish.single("everest_external/nodered/{}/evcc/active_powercurve", str(formatted_curve), hostname="mqtt-server")
+
         # TODO If a SalesTariff is present and digitally signed (and TLS is used),
         #      verify each sales tariff with the mobility operator sub 2 certificate
 
         return (
             ChargeProgressV2.START,
             secc_schedule.sa_schedule_tuple_id,
-            ChargingProfile(profile_entries=evcc_profile_entry_list),
+            ChargingProfile(profile_entries=new_schedule),
         )
 
     async def continue_charging(self) -> bool:
@@ -760,7 +809,7 @@
         else:
             # Dynamic Mode
             dynamic_params = DynamicACChargeLoopReqParams(
-                departure_time=2000,
+                departure_time=EVEREST_EV_STATE.DepartureTime,
                 ev_target_energy_request=RationalNumber(exponent=3, value=40),
                 ev_max_energy_request=RationalNumber(exponent=3, value=60),
                 ev_min_energy_request=RationalNumber(exponent=3, value=-20),
@@ -912,7 +961,7 @@
             multiplier=1, value=6000, unit=UnitSymbol.WATT_HOURS
         )
         dc_charge_params = DCEVChargeParameter(
-            departure_time=0,
+            departure_time=EVEREST_EV_STATE.DepartureTime,
             dc_ev_status=await self.get_dc_ev_status(),
             ev_maximum_current_limit=self.dc_ev_discharge_params.dc_max_current_limit,
             ev_maximum_power_limit=self.dc_ev_discharge_params.dc_max_power_limit,
